#+TITLE:Config
#+AUTH
#+STARTUP: showeverything
#+OPTIONS: toc:2

* :toc:
- [[#auto-install-packages][auto install packages]]
- [[#common][common]]
- [[#main-packages][main packages]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General keybindings]]
  - [[#pojectile][pojectile]]
  - [[#ivy][Ivy]]
  - [[#key-chord][key chord]]
  - [[#flycheck][flycheck]]
  - [[#dired][dired]]
  - [[#magit][magit]]
  - [[#org-download][org-download]]
  - [[#restclient][restclient]]
  - [[#persp-mode][persp-mode]]
  - [[#doom-modeline][doom-modeline]]
- [[#keybinds][KeyBinds]]
  - [[#global][global]]
  - [[#resize-window][resize window]]
  - [[#marks][marks]]
  - [[#buffer--bookmarks--harpoon][buffer & bookmarks & harpoon]]
  - [[#tabs-and-terminag][tabs and terminag]]
  - [[#ivy-1][ivy]]
  - [[#project][project]]
  - [[#dired-1][DIRED]]
  - [[#sudo-edit--code][Sudo Edit & code]]
  - [[#org-mode][ORG mode]]
  - [[#restclient-1][Restclient]]
  - [[#persp-mode-1][Persp-mode]]
  - [[#magit-1][Magit]]
- [[#org-settings][ORG settings]]
  - [[#org-temo-chet-sheet][Org Temo chet sheet]]
  - [[#toc][toc]]
- [[#programming][PROGRAMMING]]
  - [[#python][python]]
  - [[#tree-sitter][tree-sitter]]
- [[#decorations][decorations]]
  - [[#colorthemes][colorthemes]]
  - [[#diff][diff]]
  - [[#fonts][fonts]]
  - [[#icons][icons]]
  - [[#rainbow-mode][rainbow mode]]
  - [[#evil-snipe][evil-snipe]]
  - [[#org-chckbox-hl][org chckbox hl]]
  - [[#opacity][opacity]]

* auto install packages
#+begin_src emacs-lisp
(require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
           '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

(defvar my-required-packages
  '(doom-themes
    evil
    evil-collection
    general
    key-chord
    toc-org
    org-bullets
    projectile
    sudo-edit
    ivy
    counsel
    harpoon
    bm
    vterm
    org-download
    restclient
    persp-mode ;; watch docs

    ;; decorations
    rainbow-mode
    diredfl
    all-the-icons
    all-the-icons-dired ;; M-x all-the-icons-install-fonts
    centered-window

    tree-sitter
    diff-hl
    neotree
    dired-subtree
    tree-sitter-langs
    flycheck
    flycheck-pycheckers
    ;; python
    elpy
    haskell-mode

    ;; apps
    image-dired+
    helpful
   ))

  ;; Список пакетов для установки.

;; Установите недостающие пакеты.
(dolist (p my-required-packages)
  (unless (package-installed-p p)
    (package-install p)))
#+end_src


* common
#+begin_src emacs-lisp
(menu-bar-mode -1)                                        ;  Отключение меню-бара
(tool-bar-mode -1)                                        ;  Отключение панели инструментов
(scroll-bar-mode -1)                                      ;  Отключение вертикальной полосы прокрутки
(show-paren-mode 1)                                       ;  Включение подсветки соответствующих скобок
                                                            
(setq make-backup-files nil)                              ;  Отключение создания файлов резервных копий (файлов с суффиксом ~)
(setq auto-save-default nil)                              ;  Отключение автосохранения и создания файлов с префиксом .#
(setq inhibit-startup-screen t)                           ;  Отключение стартового экрана при запуске Emacs
                                                            
(setq-default isearch-lazy-highlight t)                   ;  Включение "ленивой" подсветки при поиске
                                                            
(global-visual-line-mode t)                               ;  Включение переноса строк вместо горизонтального скролла
(setq-default display-line-numbers 'relative)             ;  Включение относительных номеров строк

(prefer-coding-system 'utf-8)                             ;  Установка предпочтительной системы кодирования на UTF-8
(set-default-coding-systems 'utf-8)                       ;  Установка системы кодирования по умолчанию на UTF-8
(set-terminal-coding-system 'utf-8)                       ;  Установка системы кодирования терминала на UTF-8
(set-keyboard-coding-system 'utf-8)                       ;  Установка системы кодирования клавиатуры на UTF-8
(setq default-buffer-file-coding-system 'utf-8)           ;  Установка системы кодирования файловых буферов на UTF-8
(setq scroll-conservatively 10000)                        ;  Установка плавного скроллинга без резкого перемещения экрана
(electric-pair-mode 1)                                    ;  автоматически закрывать скопки
#+end_src

* main packages
** Evil Mode
https://github.com/emacs-evil/evil

#+begin_src emacs-lisp

;; evil, evil-collection
(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
(setq evil-want-keybinding nil)
(setq evil-vsplit-window-right t)
(setq evil-split-window-below t)

(setq evil-want-C-u-scroll t)

(require 'evil)
(evil-mode 1)

(define-key evil-normal-state-map "p" 'evil-paste-before) ;  не копировать после вставки
(setq evil-collection-mode-list '(dashboard dired ibuffer))
(evil-collection-init)
#+end_src


** General keybindings
https://github.com/noctuid/general.el

#+begin_src emacs-lisp
  (require 'general)
  (general-evil-setup)

  (general-create-definer spc-leader
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode
#+end_src

** pojectile
#+begin_src emacs-lisp
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy)
#+end_src

** Ivy
#+begin_src emacs-lisp
(ivy-mode +1)
#+end_src

** key chord
#+begin_src emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
(key-chord-define evil-insert-state-map  "kj" 'evil-normal-state)
#+end_src

** flycheck
#+begin_src emacs-lisp
(global-flycheck-mode 1)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
(flycheck-add-next-checker 'python-flake8 'python-pylint)

(flymake-mode -1)
#+end_src

** dired
#+begin_src emacs-lisp
(setq dired-sort-default-list '(("name" "Name" t (t)))
                           dired-listing-switches "-alh --group-directories-first")

(defun dired-open-file-in-new-tab ()
  "Open the current file in dired in a new tab."
  (interactive)
  (tab-new)
  (dired-find-file))

#+end_src

** magit
#+begin_src emacs-lisp
;; (require 'magit)
;; (magit-mode +1)
#+end_src

** org-download
#+begin_src emacs-lisp
(require 'org-download)
(setq-default org-download-image-dir "~/Pictures/foo")
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

** restclient
#+begin_src emacs-lisp
(require 'restclient)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+end_src

** persp-mode
#+begin_src emacs-lisp
(setq persp-nil-name "1")
(with-eval-after-load "persp-mode-autoloads"
  (setq wg-morph-on nil) ;; switch off animation
  (setq persp-autokill-buffer-on-remove 'kill-weak)
  (add-hook 'window-setup-hook #'(lambda () (persp-mode 1))))
#+end_src
** doom-modeline
#+begin_src emacs-lisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+end_src


* KeyBinds
** global
#+begin_src emacs-lisp
(global-set-key (kbd "C-;") 'keyboard-escape-quit)
#+end_src

** resize window
*** centered with dired
#+begin_src emacs-lisp
(defun centered ()
  "In dired, open current file in another window if exists, otherwise split window horizontally."
  (interactive)

  (split-window-right)
  (projectile-dired)
  (other-window 1)
  (enlarge-window-horizontally 70))

(spc-leader
  "c c" '(centered :wk "centered"))
#+end_src

** marks
#+begin_src emacs-lisp
(spc-leader
  "m" '(:ignore t :wk "marks")
  "m a" '(bm-toggle :wk "toggle mark")
  "m n" '(bm-next :wk "next mark")
  "m p" '(bm-previous :wk "prev mark")
  "m l" '(bm-show :wk "list marks")
  "m k" '(bm-remove-all-all-buffers :wk "claer mark"))
#+end_src

** buffer & bookmarks & harpoon
#+begin_src emacs-lisp
(spc-leader
  ;; buffer
  "b" '(:ignore t :wk "buffer")
  "b i" '(ibuffer :wk "Switch ibuffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  ;; bookmark
  "b s" '(bookmark-set :wk "set bookmarks")
  "b d" '(bookmark-delete :wk "delete bookmarks")
  "b l" '(list-bookmarks :wk "list bookmarks")
  "b j" '(bookmark-jump :wk "list jump")
  "b a" '(bookmark-set :wk "bookmarks set")

  "b r" '(revert-buffer :wk "Reload buffer"))

(spc-leader 
  "TAB" '(:ignore t :wk "?")
  "TAB TAB" '(comment-line :wk "comment line")
)

(spc-leader
  "h" '(:ignore t :wk "help & harpoon")
  "h a" '(harpoon-add-file :wk "add to harpoon")
  "h c" '(harpoon-clear :wk "harboon clear")
  "h l" '(harpoon-toggle-quick-menu :wk "toggle menu")
  "h m" '(harpoon-quick-menu-hydra :wk "quick menu")
  "h 1" '(harpoon-go-to-1 :wk "1")
  "h 2" '(harpoon-go-to-2 :wk "2")
  "h 3" '(harpoon-go-to-3 :wk "3")
  "h 4" '(harpoon-go-to-4 :wk "4")
  "h 5" '(harpoon-go-to-5 :wk "5")

  "h d" '(:ignore t :wk "harpoon delete")
  "h d 1" '(harpoon-delete-1 :wk "1")
  "h d 2" '(harpoon-delete-2 :wk "2")
  "h d 3" '(harpoon-delete-3 :wk "3")
  "h d 4" '(harpoon-delete-4 :wk "4")
  "h d 5" '(harpoon-delete-5 :wk "5")

  "h r r" '((lambda () (interactive) (load-file "/home/fs/.emacs.d/init.el")) :wk "Reload emacs config"))
#+end_src

** tabs and terminag
#+begin_src emacs-lisp
(global-set-key (kbd "C-l") 'tab-next)
(global-set-key (kbd "C-h") 'tab-previous)
(global-set-key (kbd "C-c k") 'tab-close)

(spc-leader
    "t" '(:ignore t :wk "tab and terminal")
    "t t" '(vterm :wk "vterm")
    "t n" '(tab-bar-new-tab :wk "tab")
    "t c" '(tab-close :wk "close tab"))
#+end_src

** ivy
#+begin_src emacs-lisp
(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
#+end_src

** project
#+begin_src emacs-lisp
(spc-leader
  "SPC" '(counsel-fzf :wk "find file")
  "." '(swiper :wk "swiper")
  "p" '(:ignore t :wk "projectile")
  "p a" '(projectile-add-known-project :wk "add project")
  "p s" '(projectile-switch-project :wk "switch project")
  "p g" '(counsel-rg :wk "project tile grep")

  "b i" '(projectile-ibuffer :wk "Switch buffer")
  "b n" '(projectile-next-project-buffer :wk "next project buffer")
  "b p" '(projectile-previous-project-buffer :wk "previous project buffer"))

#+end_src

** DIRED
*** default dired
#+begin_src emacs-lisp
(spc-leader
  "d" '(:ignore t :wk "dired")
  "d o" '(dired :wk "open dired")

  "d c" '(:ignore t :wk "copy/crete")
  "d c c" '(dired-do-copy :wk "copy")
  "d c d" '(dired-create-directory :wk "create dir")
  "d c f" '(dired-create-empty-file :wk "crete file")
  "d r" '(dired-do-rename :wk "renema & move")

  "d p" '(:ignore t :wk "permissions")
  "d p p" '(dired-do-chmod :wk "chmod")
  "d p o" '(dired-do-chown :wk "chown")

  "d h" '(dired-hide-details-mode :wk "hide/show deteils")
)

(evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
#+end_src

открыть файл в вертикально разделенном экране
#+begin_src emacs-lisp
(defun dired-open-split-horizontal ()
  "In dired, open current file in another window if exists, otherwise split window horizontally."
  (interactive)
  ;; Сохраняем путь текущего файла
  (let ((current-file (dired-get-file-for-visit)))
    ;; Проверяем, есть ли другое окно
    (if (one-window-p)
        (split-window-horizontally))
    ;; Переключаемся на другое окно
    (other-window 1)
    ;; Открываем файл или каталог, используя сохраненный путь
    (find-file current-file))
    (other-window 1))

(define-key dired-mode-map (kbd "s") 'dired-open-in-split-window)


(evil-define-key 'normal dired-mode-map (kbd "s") 'dired-open-split-horizontal)
#+end_src

*** dired subtree
#+begin_src emacs-lisp
(require 'dired-subtree)

(evil-define-key 'normal dired-mode-map (kbd "i") 'dired-subtree-insert)
(evil-define-key 'normal dired-mode-map (kbd "r") 'dired-subtree-remove)
(evil-define-key 'normal dired-mode-map (kbd "o") 'dired-open-file-in-new-tab)

#+end_src

** Sudo Edit & code
#+begin_src emacs-lisp
(require 'sudo-edit)
(spc-leader
  "c" '(:ignore t :wk "code")
  "c s" '(sudo-edit :wk "sudo-edit")
  "s" '(:ignore t :wk "split window")
  "s h" '(split-window-right :wk "split window horizontaly")
  "s v" '(split-window-below :wk "split window verticalty"))
#+end_src

** ORG mode
#+begin_src emacs-lisp
(spc-leader
  "o" '(:ignore t :wk "org mode")
  "o c" '(org-time-stamp :wk "calendar paste date")
  "o r" '(org-shiftmetaright :wk "move metric right")
  "o l" '(org-shiftmetaleft :wk "move metric left")
  "o t" '(org-tree-to-indirect-buffer :wk "tree to inderect buffer")
  "o o" '(org-cycle-global :wk "org cycle global")
)
#+end_src

** Restclient
#+begin_src emacs-lisp
(spc-leader
  "r" '(:ignore t :wk "rest client")
  "r s" '(restclient-http-send-current-stay-in-window :wk "send http"))
#+end_src

** Persp-mode
#+begin_src emacs-lisp
(spc-leader
  "w" '(:ignore t :wk "workspace")
  "w a" '(persp-add-new :wk "switch workspace")
  "w s" '(persp-switch :wk "switch workspace")
  "w n" '(persp-next :wk "next workspace")
  "w p" '(persp-prev :wk "prev workspace")
  "w k" '(persp-kill :wk "kill workspace")

  "w 1" '(lambda () (interactive) (persp-frame-switch "1")) :wk "move to workspace 1"
  "w 2" '(lambda () (interactive) (persp-frame-switch "2")) :wk "move to workspace 2"
  "w 3" '(lambda () (interactive) (persp-frame-switch "3")) :wk "move to workspace 3"
  "w 4" '(lambda () (interactive) (persp-frame-switch "4")) :wk "move to workspace 4"
  "w 5" '(lambda () (interactive) (persp-frame-switch "5")) :wk "move to workspace 5"
  "w 6" '(lambda () (interactive) (persp-frame-switch "6")) :wk "move to workspace 6"
)
#+end_src

** Magit
#+begin_src emacs-lisp
(spc-leader
  "g" '(:ignore t :wk "git")
  "g g" '(magit :wk "magit")
  "g a" '(magit-stage-buffer-file :wk "add curent file")
  "g u" '(magit-unstage-buffer-file :wk "unstage current file")

  "g l" '(:ignore t :wk "log")
  "g l g" '(magit-log-current :wk "log")
  "g l l" '(magit-log-buffer-file :wk "log buffer")

  "g b" '(:ignore t :wk "branch")
  "g b b" '(magit-branch-checkout t :wk "branch")
  "g b p" '(magit-pull-branch t :wk "branch")

  "g d" '(:ignore t :wk "diff")
  "g d d" '(magit-diff-buffer-file :wk "log buffer")
  "g d g" '(magit-diff-buffer-file :wk "log buffer")
)
#+end_src



* ORG settings
** Org Temo chet sheet
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

** toc
#+begin_src emacs-lisp
(require 'toc-org nil t)
   (add-hook 'org-mode-hook 'toc-org-enable)
   (add-hook 'org-mode-hook 'org-indent-mode)
   (setq toc-org-max-depth 2)

(require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(require 'org-bullets)
  (which-key-mode 1)

    (setq which-key-min-display-lines 10)
    (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-separator " → " )

(require 'org-tempo)

;;(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

* PROGRAMMING
** python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (setq tab-width 4)
            (setq python-indent-offset 4)
            (elpy-enable)
            (elpy-mode)
            (flymake-mode -1) ;; turn off flymake
            (remove-hook 'elpy-modules 'elpy-module-flymake)
            (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))))
;; (setq flycheck-pycheckers-max-line-length 120)
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook #'tree-sitter-mode +1)
  (add-hook 'python-mode-hook #'tree-sitter-hl-mode +1)
#+end_src


* decorations
** colorthemes
#+begin_src emacs-lisp
;; (load-theme 'doom-nord t)
;; (load-theme 'doom-gruvbox t)
(load-theme 'doom-ayu-dark t)
;; (load-theme 'dracula t)
#+end_src

** diff
#+begin_src emacs-lisp
(global-diff-hl-mode +1)
#+end_src

** fonts
#+begin_src emacs-lisp
;; small
;; (set-face-attribute 'default nil
;;   :font "JetBrainsMonoNL Nerd Font"
;;   :height 110 ;; 110
;;   :weight 'medium)
;; (set-face-attribute 'variable-pitch nil
;;   :font "JetBrainsMonoNL Nerd Font"
;;   :height 120 ;; 120
;;   :weight 'medium)
;; (set-face-attribute 'fixed-pitch nil
;;   :font "JetBrainsMonoNL Nerd Font"
;;   :height 110 ;; 110
;;   :weight 'medium)

;; big font
(set-face-attribute 'default nil
  :font "JetBrainsMonoNL Nerd Font"
  :height 150 ;; 110
  ;; :height 110 ;; 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "JetBrainsMonoNL Nerd Font"
  :height 160 ;; 120
  ;; :height 120 ;; 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMonoNL Nerd Font"
  :height 150 ;; 110
  ;;:height 110 ;; 110
  :weight 'medium)


;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrainsMonoNL Nerd Font"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src


** icons
#+begin_src emacs-lisp
(require 'all-the-icons)
(require 'all-the-icons-dired)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

** rainbow mode
This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background.
#+begin_src emacs-lisp
(require 'rainbow-mode)
(add-hook 'org-mode-hook 'rainbow-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
#+end_src

** evil-snipe
#+begin_src emacs-lisp
(require 'evil-snipe)
(evil-snipe-mode +1)
(evil-snipe-override-mode +1)
#+end_src

** org chckbox hl
#+begin_src emacs-lisp
(defface org-checkbox-done-text
     '((t (:inherit org-done)))
     "Face for the text part of a checked org-mode checkbox.")
 
 (font-lock-add-keywords
  'org-mode
  `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-checkbox-done-text prepend))
  'append)
#+end_src

** opacity
#+begin_src emacs-listp
(set-frame-parameter nil 'alpha-background 80)
(add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src
